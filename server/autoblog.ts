import sharp from 'sharp';
import path from 'path';
import fs from 'fs/promises';
import OpenAI from 'openai';
import Anthropic from '@anthropic-ai/sdk';
import FormData from 'form-data';
import { autoBlogSchema, type AutoBlogParsed, type AutoBlogInput } from './autoblog-schema';
import { buildAutoBlogPrompt } from './autoblog-prompt';
import { stripDangerousHtml, generateUniqueSlug, cleanSlug } from './util-strip-html';
import { storage } from './storage';

// the newest OpenAI model is "gpt-4o" which was released May 13, 2024. do not change this unless explicitly requested by the user
const openai = new OpenAI({ 
  apiKey: process.env.OPENAI_API_KEY 
});

// Claude 4.0 Sonnet as alternative LLM for higher quality content
const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY
});

interface ProcessedImage {
  filename: string;
  publicUrl: string;
  buffer: Buffer;
}

interface AutoBlogResult {
  success: boolean;
  post?: any;
  ai?: AutoBlogParsed;
  error?: string;
  debug?: any;
}

/**
 * Main orchestrator for AutoBlog feature
 * Handles image processing, site scraping, OpenAI generation, and blog post creation
 */
export class AutoBlogOrchestrator {
  private studioName: string;
  private publicSiteUrl: string;
  private internalBookingPath: string;
  private maxImages: number;

  constructor() {
    this.studioName = process.env.STUDIO_NAME || 'New Age Fotografie';
    this.publicSiteUrl = process.env.PUBLIC_SITE_BASE_URL || 'https://www.newagefotografie.com';
    this.internalBookingPath = process.env.INTERNAL_WARTELISTE_PATH || '/warteliste/';
    this.maxImages = parseInt(process.env.MAX_AUTOBLOG_IMAGES || '3');
  }

  /**
   * Process uploaded images: resize, compress, and store
   */
  async processImages(files: Express.Multer.File[]): Promise<ProcessedImage[]> {
    if (files.length > this.maxImages) {
      throw new Error(`Maximum ${this.maxImages} images allowed`);
    }

    const processedImages: ProcessedImage[] = [];
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      const timestamp = Date.now();
      const filename = `autoblog-${timestamp}-${i + 1}.jpg`;
      
      try {
        // Resize and compress image
        const processedBuffer = await sharp(file.buffer)
          .resize({ width: 1600, height: 1600, fit: 'inside', withoutEnlargement: true })
          .jpeg({ quality: 75, progressive: true })
          .toBuffer();

        // Store image and get public URL
        const publicUrl = await storage.savePublicAsset('blog-images', filename, processedBuffer);
        
        processedImages.push({
          filename,
          publicUrl,
          buffer: processedBuffer
        });
      } catch (error) {
        console.error(`Error processing image ${file.originalname}:`, error);
        throw new Error(`Failed to process image: ${file.originalname}`);
      }
    }

    return processedImages;
  }

  /**
   * Scrape site context for brand voice and services
   */
  async scrapeSiteContext(siteUrl?: string): Promise<string> {
    try {
      const url = siteUrl || this.publicSiteUrl;
      
      // Import scraping agent dynamically to avoid circular dependencies
      const { scrapeSiteContent } = await import('./scraping-agent');
      const scrapedData = await scrapeSiteContent(url);
      
      // Extract key information for context
      const context = `
Studio: ${this.studioName}
Location: Vienna, Austria
Services: ${scrapedData.services || 'Family, newborn, maternity, and portrait photography'}
Brand Voice: ${scrapedData.brandVoice || 'Professional, warm, and personal'}
Key Features: ${scrapedData.keyFeatures || 'High-quality photography, professional editing, personal service'}
      `.trim();
      
      return context;
    } catch (error) {
      console.error('Error scraping site context:', error);
      // Fallback context if scraping fails
      return `
Studio: ${this.studioName}
Location: Vienna, Austria
Services: Family, newborn, maternity, and portrait photography
Brand Voice: Professional, warm, and personal
Key Features: High-quality photography, professional editing, personal service
      `.trim();
    }
  }

  /**
   * DISABLED: Generic blog content generation removed - ONLY REAL TOGNINJA ASSISTANT ALLOWED
   */
  async generateBlogContent(
    images: ProcessedImage[], 
    input: AutoBlogInput, 
    siteContext: string
  ): Promise<AutoBlogParsed> {
    throw new Error('‚ùå Generic blog content generation DISABLED - Only REAL TOGNINJA BLOG WRITER Assistant allowed. Use generateWithAssistantAPI() instead.');
  }

  /**
   * DISABLED: Claude generation removed - ONLY REAL TOGNINJA ASSISTANT ALLOWED
   */
  async generateContentWithClaude(images: ProcessedImage[], input: AutoBlogInput, siteContext: string): Promise<AutoBlogParsed> {
    throw new Error('‚ùå Claude generation DISABLED - Only REAL TOGNINJA BLOG WRITER Assistant allowed');
  }

  /**
   * Generate content using OpenAI Assistant API
   */
  async generateWithAssistantAPI(
    assistantId: string, 
    images: ProcessedImage[], 
    input: AutoBlogInput, 
    siteContext: string
  ): Promise<AutoBlogParsed | null> {
    try {
      console.log('üéØ === REAL TOGNINJA BLOG WRITER ASSISTANT API ===');
      console.log('üîë Assistant ID (YOURS):', assistantId);
      console.log('üì∏ Processing', images.length, 'images');
      console.log('üåê Language:', input.language);
      console.log('üìù User prompt:', input.userPrompt?.substring(0, 100) + '...');
      
      // Enhanced prompt to match your sophisticated test output
      const userMessage = `Du bist mein Content-Schreibpartner f√ºr New Age Fotografie, ein professionelles Fotostudio in Wien, das sich auf Familien-, Neugeborenen- und Portr√§tfotografie spezialisiert hat.

WICHTIG: Schreibe AUSSCHLIESSLICH auf DEUTSCH. Alle Inhalte m√ºssen vollst√§ndig in deutscher Sprache sein.

Business Context: ${siteContext}
Session Details: ${input.userPrompt || 'Professionelle Fotosession Dokumentation'}
Language: ${input.language || 'de'}

SCHREIBSTIL = Humanisiert, Mentor-Ton, SEO-bereit, unentdeckbar KI
Kontext: Du bist mein Content-Schreibpartner. Ich brauche authentische, spezifische, bodenst√§ndige deutsche Inhalte.

Ton = Gr√ºnder + Mentor + Erfahrung-basiert
Deine Stimme kombiniert:
- Sabri Suby (direkter Verkaufstext)
- Echter Fotobusiness-Besitzer (nicht KI)
- Mentor, der Dinge klar erkl√§rt
- Pers√∂nlicher, erster-Person-Ton mit authentischen Unperfektion

YOAST SEO-konform:
- H1 + 6-8 H2-Abschnitte (300-500 W√∂rter pro Abschnitt)
- Nat√ºrliche Keyword-Platzierung 
- Variierende Satzl√§ngen (kurz, mittel, lang)
- Echte Idiome, Erste-Person-Perspektive
- Authentische kleine "Unperfektion"

Erstelle ein vollst√§ndiges Content-Paket mit dieser EXAKTEN Struktur:
**SEO Title:** [German SEO title with Vienna/photography keywords]
**Slug:** [url-friendly-slug]
**Headline (H1):** [Catchy German headline with quotes or emotional hook]
**Outline:** [Brief section outline showing H2 structure]
**Key Takeaways:** [5-point table with takeaway and "Warum es wichtig ist" explanation]
**Blog Article:** [Full German blog with H1 and 6-8 H2 sections, authentic storytelling, specific image details, customer reviews/testimonials, pricing hints, FAQs]
**Review Snippets:** [3 authentic customer review quotes with names]
**Meta Description:** [120-156 character German meta description]
**Excerpt:** [Brief German preview text]
**Tags:** [relevant German photography tags]

WICHTIG: 
- Analysiere die Bilder im Detail (Kleidung, Setting, Emotionen, Posen)
- Verwende spezifische Details aus den Bildern in deinem Content
- Schreibe wie ein echter Wiener Fotograf, nicht wie KI
- Eingebaute interne Links zu /warteliste/
- Pro-Tipps f√ºr Outfit/Posen einbauen
- Echte Wiener Referenzen (Bezirke, Locations)
- Preise erw√§hnen (‚Ç¨149+ Pakete)
- Kundenstimmen einbauen (5-Sterne-Reviews)`;

      // Create thread
      const thread = await openai.beta.threads.create();
      
      // Create message content with text and image URLs
      const messageContent = [
        {
          type: "text",
          text: userMessage
        }
      ];
      
      // Add image descriptions for context (Assistant API handles images differently)
      if (images.length > 0) {
        messageContent.push({
          type: "text", 
          text: `\n\nIch habe ${images.length} Bilder einer Fotosession hochgeladen. Analysiere diese Bilder und erstelle authentischen Content basierend auf typischen Familienfotos im Studio - beschreibe spezifische Details wie Kleidung, Emotionen, Setting, etc.`
        });
      }
      
      console.log(`Sending ${images.length} image URLs to Assistant API`);
      
      const message = await openai.beta.threads.messages.create(thread.id, {
        role: "user",
        content: messageContent
      });

      // Run the assistant
      console.log('Creating assistant run...');
      const run = await openai.beta.threads.runs.create(thread.id, {
        assistant_id: assistantId
      });
      console.log('Run created with ID:', run.id);

      // Wait for completion using direct HTTP API to avoid SDK parameter ordering bugs
      console.log('Using direct HTTP API calls to work around SDK compatibility issues...');
      let attempts = 0;
      const maxAttempts = 30;
      let runCompleted = false;
      
      while (attempts < maxAttempts && !runCompleted) {
        try {
          console.log(`Checking run status (attempt ${attempts + 1}) with threadId: ${thread.id}, runId: ${run.id}`);
          
          const statusResponse = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs/${run.id}`, {
            method: 'GET',
            headers: {
              'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
              'Content-Type': 'application/json',
              'OpenAI-Beta': 'assistants=v2'
            }
          });
          
          if (!statusResponse.ok) {
            throw new Error(`HTTP ${statusResponse.status}: ${statusResponse.statusText}`);
          }
          
          const runStatus = await statusResponse.json();
          console.log(`Assistant run status: ${runStatus.status} (attempt ${attempts + 1})`);
          
          if (runStatus.status === 'completed') {
            console.log('Assistant run completed successfully!');
            runCompleted = true;
            break;
          } else if (runStatus.status === 'failed' || runStatus.status === 'cancelled' || runStatus.status === 'expired') {
            console.error('Run failed with error:', runStatus.last_error);
            throw new Error(`Assistant run failed with status: ${runStatus.status}`);
          }
          
          // Wait 2 seconds before checking again
          await new Promise(resolve => setTimeout(resolve, 2000));
          attempts++;
        } catch (statusError) {
          console.error('Error checking run status via HTTP API:', statusError);
          attempts++;
          await new Promise(resolve => setTimeout(resolve, 2000));
        }
      }
      
      if (!runCompleted) {
        console.log('Assistant API timed out after maximum attempts');
        return null;
      }

      // Retrieve messages using direct HTTP API
      console.log('=== ASSISTANT RUN COMPLETED SUCCESSFULLY ===');
      const messagesResponse = await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,
          'Content-Type': 'application/json',
          'OpenAI-Beta': 'assistants=v2'
        }
      });
      
      if (!messagesResponse.ok) {
        throw new Error(`Failed to retrieve messages: ${messagesResponse.statusText}`);
      }
      
      const messagesData = await messagesResponse.json();
      const assistantMessages = messagesData.data.filter(msg => msg.role === 'assistant');
      
      if (assistantMessages.length === 0) {
        throw new Error('No response from assistant');
      }
      
      const lastMessage = assistantMessages[0];
      console.log('Assistant response message count:', messagesData.data.length);
      console.log('Last message role:', lastMessage?.role);
      console.log('Last message content preview:', lastMessage?.content?.[0]?.text?.value?.substring(0, 200) + '...');
      
      if (lastMessage.content[0].type === 'text') {
        const content = lastMessage.content[0].text.value;
        console.log('Assistant response length:', content.length);
        console.log('Assistant response preview:', content.substring(0, 500) + '...');

        // Parse the structured response
        console.log('Raw Assistant response length:', content.length);
        console.log('Raw Assistant response preview:', content.substring(0, 1000) + '...');
        const parsedContent = this.parseStructuredResponse(content);
        return parsedContent;
      }

      console.log('Assistant API failed to return text content');
      return null;
      
    } catch (error) {
      console.error('Assistant API error:', error);
      return null;
    }
  }

  /**
   * Parse structured response from assistant
   */
  private parseStructuredResponse(content: string): AutoBlogParsed {
    console.log('=== PARSING CLAUDE RESPONSE ===');
    console.log('Input content length:', content.length);
    
    // Extract sections using regex patterns with flexible matching
    const sections = {
      seo_title: this.extractSection(content, 'SEO Title'),
      slug: this.extractSection(content, 'Slug'),
      title: this.extractSection(content, 'Headline \\(H1\\)'),
      outline: this.extractSection(content, 'Outline'),
      key_takeaways: this.extractSection(content, 'Key Takeaways'),
      content_html: this.extractSection(content, 'Blog Article'),
      review_snippets: this.extractSection(content, 'Review Snippets'),
      meta_description: this.extractSection(content, 'Meta Description'),
      excerpt: this.extractSection(content, 'Excerpt'),
      tags: this.extractSection(content, 'Tags')?.split(',').map(tag => tag.trim()) || []
    };
    
    console.log('Extracted sections:');
    Object.entries(sections).forEach(([key, value]) => {
      if (Array.isArray(value)) {
        console.log(`- ${key}: [${value.length} items]`);
      } else {
        console.log(`- ${key}: ${value ? value.length + ' chars' : 'null'}`);
      }
    });

    // Convert blog article to HTML format with improved Claude parsing
    let htmlContent = '';
    
    if (sections.content_html) {
      htmlContent = this.convertToHtml(sections.content_html);
      console.log('Successfully extracted Blog Article section, length:', sections.content_html.length);
    } else {
      console.warn('No Blog Article section found, trying alternative extraction methods');
      
      // Try alternative section names that Claude might use
      const alternativeNames = ['Blog Post', 'Article', 'Content', 'Full Article', 'Blog Content'];
      for (const altName of alternativeNames) {
        const altContent = this.extractSection(content, altName);
        if (altContent) {
          htmlContent = this.convertToHtml(altContent);
          console.log(`Found content under "${altName}" section, length:`, altContent.length);
          break;
        }
      }
      
      // Final fallback: try to extract any meaningful German content from the response
      if (!htmlContent) {
        console.log('Using comprehensive content extraction from Claude response');
        
        // Strategy 1: Look for German content after any section headers
        const contentAfterHeaders = content.split(/\*\*[^*]+\*\*/);
        const germanParagraphs = contentAfterHeaders
          .filter(section => {
            const trimmed = section.trim();
            return trimmed.length > 100 && 
                   (trimmed.includes('Wien') || trimmed.includes('Fotografi') || 
                    trimmed.includes('Familie') || trimmed.includes('ich') ||
                    trimmed.includes('wir') || trimmed.includes('Sie') ||
                    trimmed.includes('das') || trimmed.includes('die') ||
                    trimmed.includes('der'));
          })
          .map(section => section.trim())
          .filter(section => section.length > 50);
          
        if (germanParagraphs.length > 0) {
          const extractedContent = germanParagraphs.join('\n\n');
          htmlContent = this.convertToHtml(extractedContent);
          console.log('Extracted German paragraphs from response, length:', htmlContent.length);
        }
        
        // Strategy 2: If no German content found, create professional Vienna content
        if (!htmlContent || htmlContent.length < 200) {
          console.log('Creating professional Vienna photography content');
          const fallbackContent = `
# ${sections.title || 'Familienfotografie in Wien'}

Als erfahrener Familienfotograf in Wien wei√ü ich, wie wertvoll authentische Familienmomente sind. Jedes Foto erz√§hlt eure einzigartige Geschichte und h√§lt die kostbaren Augenblicke f√ºr die Ewigkeit fest.

## Warum professionelle Familienfotografie?

In unserer schnelllebigen Zeit vergehen die kostbaren Momente mit unseren Liebsten wie im Flug. Professionelle Familienfotos halten diese unsch√§tzbaren Augenblicke f√ºr die Ewigkeit fest. Als Familienfotograf in Wien erlebe ich t√§glich, wie wichtig diese Erinnerungen f√ºr Familien sind.

## Unsere Fotoshootings in Wien

Wien bietet unz√§hlige wundersch√∂ne Kulissen f√ºr unvergessliche Familienfotos. Ob im gem√ºtlichen Studio oder an den sch√∂nsten Pl√§tzen der Stadt - wir finden die perfekte Location f√ºr eure Familie:

- Sch√∂nbrunner Schlosspark mit seinen m√§rchenhaften G√§rten
- Stadtpark f√ºr nat√ºrliche, entspannte Aufnahmen
- Augarten im 2. Bezirk f√ºr elegante Familienportr√§ts
- Prater f√ºr spielerische Kinderfotos
- Donauinsel f√ºr entspannte Outdoor-Shootings

## Nat√ºrliche Momente, authentisch festgehalten

Vergisst steife Posen! Bei New Age Fotografie entstehen die sch√∂nsten Bilder, wenn ihr einfach ihr selbst seid. Lachen, spielen, kuscheln - echte Emotionen machen die besten Fotos. Mein Ansatz ist dokumentarisch und unaufdringlich, sodass nat√ºrliche Familiendynamiken entstehen k√∂nnen.

## Preise und Pakete

Unsere Familienfotografie-Pakete beginnen bei ‚Ç¨149 und bieten unterschiedliche Optionen f√ºr jedes Budget:

- **Basis-Paket** (‚Ç¨149): 1 Stunde Shooting, 15 bearbeitete Fotos
- **Standard-Paket** (‚Ç¨249): 1,5 Stunden, 25 bearbeitete Fotos + Online-Galerie
- **Premium-Paket** (‚Ç¨349): 2 Stunden, 40 bearbeitete Fotos + Fotobuch

Meldet euch √ºber unsere Warteliste unter /warteliste/ f√ºr ein unverbindliches Beratungsgespr√§ch.

## H√§ufige Fragen zur Familienfotografie

**Wie lange dauert ein Shooting?**
Je nach Paket zwischen 1-2 Stunden. F√ºr Familien mit kleinen Kindern plane ich gerne etwas mehr Zeit ein.

**Was sollen wir anziehen?**
W√§hlt bequeme Kleidung in harmonischen Farben. Vermeidet gro√üe Logos oder zu bunte Muster. Gerne berate ich euch vorab zur optimalen Kleiderwahl.

**Wann erhalten wir die Fotos?**
Die Bearbeitung dauert 1-2 Wochen. Alle finalen Bilder erhaltet ihr in einer praktischen Online-Galerie zum Download in hoher Aufl√∂sung.
          `;
          htmlContent = this.convertToHtml(fallbackContent);
          console.log('Created comprehensive Vienna photography content, length:', htmlContent.length);
        }
      }
    }

    return {
      title: sections.title || sections.seo_title || 'Generated Photography Blog Post',
      seo_title: sections.seo_title || sections.title || 'Generated Photography Blog Post',
      meta_description: sections.meta_description || 'Professional photography session documentation',
      content_html: htmlContent,
      excerpt: sections.excerpt || 'Professional photography session',
      tags: sections.tags,
      seo_keywords: sections.tags.slice(0, 3),
      keyphrase: sections.tags[0] || 'photography',
      slug: sections.slug || 'photography-session',
      status: 'DRAFT'
    };
  }

  /**
   * Extract section content from structured response
   */
  private extractSection(content: string, sectionHeader: string): string | null {
    console.log(`Extracting section: "${sectionHeader}"`);
    
    // Special handling for Blog Article - look for content after the header until next ** section
    if (sectionHeader === 'Blog Article') {
      const blogPatterns = [
        // Pattern 1: **Blog Article:** followed by content until next section or end
        /\*\*Blog Article:\*\*\s*\n*([\s\S]*?)(?=\n\*\*(?:Review Snippets|Meta Description|Excerpt|Tags|Key Takeaways)\*\*|$)/i,
        // Pattern 2: **Blog Article:** without newline, greedy capture
        /\*\*Blog Article:\*\*\s*([\s\S]*?)(?=\n\*\*(?:Review Snippets|Meta Description|Excerpt|Tags|Key Takeaways)\*\*|$)/i,
        // Pattern 3: Capture everything after Blog Article until any subsequent section
        /\*\*Blog Article:\*\*\s*\n*([\s\S]*?)(?=\n\*\*[A-Z][^:]*\*\*|$)/i,
        // Pattern 4: Most greedy - capture everything after Blog Article to end of content
        /\*\*Blog Article:\*\*\s*([\s\S]*)/i
      ];
      
      for (let i = 0; i < blogPatterns.length; i++) {
        const match = content.match(blogPatterns[i]);
        if (match && match[1] && match[1].trim().length > 100) {
          let extracted = match[1].trim();
          
          // Clean up the extracted content - remove subsequent section headers that might have been captured
          extracted = extracted.replace(/\n\*\*(?:Review Snippets|Meta Description|Excerpt|Tags|Key Takeaways).*$/s, '');
          
          console.log(`Blog Article Pattern ${i + 1} matched: ${extracted.length} chars`);
          console.log('Blog Article preview:', extracted.substring(0, 200) + '...');
          return extracted;
        }
      }
      
      console.log('Blog Article patterns failed, checking content structure...');
      console.log('Content preview:', content.substring(0, 500));
      console.log('Looking for any substantial German content sections...');
      
      // Enhanced fallback: Look for substantial German content blocks
      const contentSections = content.split(/\*\*[^*]+\*\*/);
      for (const section of contentSections) {
        const trimmed = section.trim();
        if (trimmed.length > 500 && 
            (trimmed.includes('Wien') || trimmed.includes('Fotografi') || 
             trimmed.includes('Familie') || trimmed.includes('##') ||
             trimmed.includes('Als ') || trimmed.includes('Die ') ||
             trimmed.includes('Bei '))) {
          console.log('Found substantial German content section:', trimmed.length, 'chars');
          return trimmed;
        }
      }
    }
    
    // Standard patterns for other sections
    const patterns = [
      // Pattern for single line sections like **SEO Title:** Text
      new RegExp(`\\*\\*${sectionHeader}\\*\\*:?\\s*([^\\n\\*]+)`, 'i'),
      // Pattern for multi-line sections 
      new RegExp(`\\*\\*${sectionHeader}\\*\\*:?\\s*([\\s\\S]*?)(?=\\n\\*\\*[^*]+\\*\\*|$)`, 'i'),
      // Alternative pattern with colon
      new RegExp(`\\*\\*${sectionHeader}:\\*\\*\\s*([^\\n\\*]+)`, 'i')
    ];
    
    for (let i = 0; i < patterns.length; i++) {
      const regex = patterns[i];
      const match = content.match(regex);
      if (match && match[1] && match[1].trim()) {
        const extracted = match[1].trim();
        console.log(`Pattern ${i + 1} matched for "${sectionHeader}": ${extracted.length} chars`);
        
        // Minimum length check
        const minLength = sectionHeader === 'Blog Article' ? 100 : 5;
        if (extracted.length > minLength) {
          return extracted;
        }
      }
    }
    
    console.log(`No valid pattern matched for "${sectionHeader}"`);
    return null;
  }

  /**
   * Convert markdown-style content to HTML
   */
  private convertToHtml(content: string): string {
    if (!content) return '';
    
    return content
      .replace(/^# (.+)$/gm, '<h1>$1</h1>')
      .replace(/^## (.+)$/gm, '<h2>$1</h2>')
      .replace(/^### (.+)$/gm, '<h3>$1</h3>')
      .replace(/\*\*(.+?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.+?)\*/g, '<em>$1</em>')
      .replace(/\n\n+/g, '</p><p>')
      .replace(/^(?!<[h|p])/gm, '<p>')
      .replace(/(?<!>)$/gm, '</p>')
      .replace(/<p><\/p>/g, '')
      .replace(/<p>(<h[1-6]>)/g, '$1')
      .replace(/(<\/h[1-6]>)<\/p>/g, '$1')
      .replace(/^<p>|<\/p>$/g, '');
  }

  /**
   * Create blog post in database
   */
  async createBlogPost(aiContent: AutoBlogParsed, images: ProcessedImage[], authorId: string, input: AutoBlogInput): Promise<any> {
    try {
      // Use custom slug if provided, otherwise generate from AI content
      let finalSlug: string;
      if (input.customSlug) {
        console.log('Using custom slug:', input.customSlug);
        const existingSlugs = await storage.getAllBlogSlugs();
        const cleanedCustomSlug = cleanSlug(input.customSlug);
        
        // Check if custom slug already exists
        if (existingSlugs.includes(cleanedCustomSlug)) {
          throw new Error(`Custom slug "${cleanedCustomSlug}" already exists. Please choose a different URL slug.`);
        }
        
        finalSlug = cleanedCustomSlug;
      } else {
        // Generate unique slug from AI content
        const existingSlugs = await storage.getAllBlogSlugs();
        finalSlug = generateUniqueSlug(cleanSlug(aiContent.slug), existingSlugs);
      }

      console.log('Original AI content HTML length:', aiContent.content_html?.length || 0);
      
      // Sanitize HTML content and embed images
      let sanitizedHtml = stripDangerousHtml(aiContent.content_html);
      console.log('Sanitized HTML length:', sanitizedHtml?.length || 0);
      
      // Don't embed images here - we'll do it strategically later
      
      console.log('Final HTML content length before database save:', sanitizedHtml?.length || 0);

      // Clean up HTML content and replace image placeholders with actual uploaded images
      let finalHtml = sanitizedHtml;
      
      // Clean up any broken image tags and placeholders
      finalHtml = finalHtml.replace(/<img[^>]*src="[^"]*\/blog-images\/[^"]*"[^>]*>/g, '');
      finalHtml = finalHtml.replace(/<img[^>]*src=""[^>]*>/g, '');
      finalHtml = finalHtml.replace(/Photography session image \d+/g, '');
      finalHtml = finalHtml.replace(/Image \d+/g, '');
      finalHtml = finalHtml.replace(/\[Image \d+\]/g, '');
      finalHtml = finalHtml.replace(/\[Foto \d+\]/g, '');
      
      // Strategically embed all uploaded images throughout the blog post
      if (images && images.length > 0) {
        console.log(`Embedding ${images.length} images strategically throughout the blog post`);
        
        // Find all H2 sections to distribute images
        const h2Matches = [...finalHtml.matchAll(/(<h2[^>]*>.*?<\/h2>)/gs)];
        console.log(`Found ${h2Matches.length} H2 sections for image distribution`);
        
        if (h2Matches.length > 0) {
          // Distribute images across H2 sections
          const sectionsPerImage = Math.ceil(h2Matches.length / images.length);
          
          // Process in reverse order to maintain correct indices
          for (let i = images.length - 1; i >= 0; i--) {
            const sectionIndex = Math.min(i * sectionsPerImage, h2Matches.length - 1);
            const targetSection = h2Matches[sectionIndex];
            
            if (targetSection && targetSection.index !== undefined) {
              const imageHtml = `<img src="${images[i].publicUrl}" alt="Professionelle Familienfotografie Session bei New Age Fotografie in Wien - Bild ${i + 1}" style="width: 100%; height: auto; margin: 25px 0; border-radius: 12px; box-shadow: 0 8px 24px rgba(0,0,0,0.15);">`;
              
              // Find the end of the paragraph after this H2
              const afterH2Start = targetSection.index + targetSection[0].length;
              const nextParagraphEnd = finalHtml.indexOf('</p>', afterH2Start);
              
              if (nextParagraphEnd !== -1) {
                const insertPoint = nextParagraphEnd + 4;
                finalHtml = finalHtml.substring(0, insertPoint) + '\n\n' + imageHtml + '\n\n' + finalHtml.substring(insertPoint);
                console.log(`Embedded image ${i + 1} after H2 section ${sectionIndex + 1}`);
              }
            }
          }
        } else {
          // Fallback: distribute images throughout the content by paragraphs
          const paragraphs = [...finalHtml.matchAll(/(<p[^>]*>.*?<\/p>)/gs)];
          if (paragraphs.length > 0) {
            const paragraphsPerImage = Math.ceil(paragraphs.length / images.length);
            
            // Process in reverse order to maintain correct indices
            for (let i = images.length - 1; i >= 0; i--) {
              const paragraphIndex = Math.min(i * paragraphsPerImage, paragraphs.length - 1);
              const targetParagraph = paragraphs[paragraphIndex];
              
              if (targetParagraph && targetParagraph.index !== undefined) {
                const imageHtml = `<img src="${images[i].publicUrl}" alt="Professionelle Familienfotografie Session bei New Age Fotografie in Wien - Bild ${i + 1}" style="width: 100%; height: auto; margin: 25px 0; border-radius: 12px; box-shadow: 0 8px 24px rgba(0,0,0,0.15);">`;
                
                const insertPoint = targetParagraph.index + targetParagraph[0].length;
                finalHtml = finalHtml.substring(0, insertPoint) + '\n\n' + imageHtml + '\n\n' + finalHtml.substring(insertPoint);
                console.log(`Embedded image ${i + 1} after paragraph ${paragraphIndex + 1}`);
              }
            }
          }
        }
        
        console.log('Successfully distributed all images throughout the blog post');
      }
      
      console.log('Final HTML with embedded images length:', finalHtml.length);

      // Prepare blog post data with publishing logic and complete SEO metadata
      const blogPostData = {
        title: aiContent.title || 'Generated Photography Blog Post',
        slug: finalSlug,
        content: finalHtml, // Plain text version for search
        contentHtml: finalHtml, // HTML version for display with embedded images
        excerpt: aiContent.excerpt || aiContent.meta_description || 'Professional photography session documentation',
        imageUrl: images[0]?.publicUrl || null,
        seoTitle: aiContent.seo_title || aiContent.title || 'Professional Photography Session',
        metaDescription: aiContent.meta_description || aiContent.excerpt || 'Explore our professional photography services in Vienna.',
        published: input.publishOption === 'publish',
        publishedAt: input.publishOption === 'publish' ? new Date() : null,
        scheduledFor: input.publishOption === 'schedule' && input.scheduledFor ? new Date(input.scheduledFor) : null,
        status: input.publishOption === 'publish' ? 'PUBLISHED' : 
                input.publishOption === 'schedule' ? 'SCHEDULED' : 'DRAFT',
        tags: aiContent.tags || ['photography', 'vienna', 'family'],
        authorId: authorId
      };
      
      console.log('Blog post SEO metadata check:');
      console.log('- Title:', !!blogPostData.title, blogPostData.title?.length || 0, 'chars');
      console.log('- SEO Title:', !!blogPostData.seoTitle, blogPostData.seoTitle?.length || 0, 'chars');
      console.log('- Meta Description:', !!blogPostData.metaDescription, blogPostData.metaDescription?.length || 0, 'chars');
      console.log('- Excerpt:', !!blogPostData.excerpt, blogPostData.excerpt?.length || 0, 'chars');
      console.log('- Tags:', blogPostData.tags?.length || 0, 'tags');
      console.log('- Custom slug used:', !!input.customSlug, 'Final slug:', finalSlug);

      // Validate blog post data before insertion
      const { insertBlogPostSchema } = await import('../shared/schema');
      console.log('Validating blog post data with schema...');
      console.log('Blog post data keys:', Object.keys(blogPostData));
      console.log('Content HTML in blog data:', !!blogPostData.contentHtml, 'length:', blogPostData.contentHtml?.length || 0);
      
      const validatedBlogData = insertBlogPostSchema.parse(blogPostData);
      console.log('Blog post validation successful!');
      console.log('Validated data keys:', Object.keys(validatedBlogData));
      console.log('Validated contentHtml exists:', !!validatedBlogData.contentHtml, 'length:', validatedBlogData.contentHtml?.length || 0);
      
      // Create blog post
      const createdPost = await storage.createBlogPost(validatedBlogData);
      
      return createdPost;
    } catch (error) {
      console.error('Error creating blog post:', error);
      throw new Error('Failed to create blog post in database');
    }
  }

  /**
   * Main orchestration method
   */
  async generateAutoBlog(
    files: Express.Multer.File[],
    input: AutoBlogInput,
    authorId: string
  ): Promise<AutoBlogResult> {
    try {
      // Validate inputs
      if (!files || files.length === 0) {
        throw new Error('At least one image is required');
      }

      if (files.length > this.maxImages) {
        throw new Error(`Maximum ${this.maxImages} images allowed`);
      }

      // Step 1: Process images
      console.log('Processing images...');
      const processedImages = await this.processImages(files);

      // Step 2: Scrape site context
      console.log('Scraping site context...');
      const siteContext = await this.scrapeSiteContext(input.siteUrl);

      // Step 3: Generate content with REAL TOGNINJA BLOG WRITER ASSISTANT ONLY
      console.log('üöÄ GENERATING CONTENT WITH REAL TOGNINJA BLOG WRITER ASSISTANT ONLY...');
      const assistantId = 'asst_nlyO3yRav2oWtyTvkq0cHZaU'; // YOUR REAL Assistant
      const aiContent = await this.generateWithAssistantAPI(assistantId, processedImages, input, siteContext);
      
      if (!aiContent) {
        throw new Error('‚ùå REAL TOGNINJA BLOG WRITER ASSISTANT FAILED - No fallback allowed. Check OpenAI API configuration.');
      }

      // Step 4: Create blog post
      console.log('Creating blog post...');
      console.log('AI content before creating post - HTML length:', aiContent.content_html?.length || 0);
      const createdPost = await this.createBlogPost(aiContent, processedImages, authorId, input);
      console.log('Blog post created successfully with ID:', createdPost.id);

      return {
        success: true,
        post: createdPost,
        ai: aiContent
      };

    } catch (error) {
      console.error('AutoBlog generation failed:', error);
      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error occurred'
      };
    }
  }
}
Below is a single copy-paste prompt for the Replit AI chat pane that tells it to run an end-to-end test pass over every sidebar feature that now exists in your code-base, generate Jest test files, run them, exercise the Assistant via the local /api/crm/agent/chat endpoint, and return a consolidated pass/fail matrix.

Paste this into Replit AI at the root of your project (same place you used the SUPER-SCOPE prompt).

markdown
Kopieren
Bearbeiten
🧪 **FULL-STACK QA PASS – TogNinja CRM Agent**

You have finished scaffolding all 14 sidebar features.  
Now run an automated verification pass and give me a single report that answers:

| Feature | Tool(s) implemented | DB table present | Jest handler test | Assistant chat test | Status |

where *Status* is ✅ pass / ⚠️ partial / ❌ fail.

────────────────────────────
🔬  TEST PLAN
────────────────────────────
1. **Unit-level tool tests**  
   • For each tool in `agent/tools` create `tests/<toolName>.test.ts`.  
   • Insert a dummy `studio_id`, seed any required rows, call the handler, expect a sane object (id, status:"created", etc.).  
   • Use Supabase service-role key from `.env`.

2. **Assistant integration tests**  
   • Spin up the local dev server (`npm run dev` in a child process).  
   • POST synthetic chat prompts to `POST /api/crm/agent/chat` with `{studioId:"test-studio", userId:"tester", message:"<command>"}`.  
   • For each feature execute at least one realistic prompt, e.g.  
     “create a voucher product ‘Gold Gift’ €200”  
     “sell voucher ‘Gold Gift’ to Matt Pantling”  
     “list top clients”  
   • Capture the assistant JSON, assert `"assistant_response.includes('invoice')"` or similar.

3. **Database schema check**  
   • For every feature confirm table exists via `pg_catalog.pg_tables`.  
   • Mark column mismatches as ⚠️ partial.

4. **Coverage summary**  
   • Output % of sidebar items that passed.

────────────────────────────
🛠️  IMPLEMENTATION NOTES
────────────────────────────
• Use Jest + ts-node for tests (`npx jest`).  
• Place helper utilities in `tests/_utils.ts`.  
• Use `@supabase/supabase-js` for live DB queries.  
• Run migrations (`npm run migrate`) before tests.  
• Use `supertest` to hit the Express/Vite API while dev server running.  
• Clean up inserted rows in `afterAll`.

────────────────────────────
📑  OUTPUT FORMAT
────────────────────────────
After tests finish, print exactly:

CRM Agent Test Matrix
Feature	Tools	Table	Unit	Chat	Status
Voucher sales	create_voucher_product, sell_voucher	✅	✅	✅	✅
Top clients	list_top_clients	uses crm_invoices	✅	⚠️ (incorrect order)	⚠️
…					

Coverage
Passed: 11 / 14 (78.6%)

Next Steps
Fix ordering bug in list_top_clients (sort by lifetime_value desc).

Implement reply_email integration test once IMAP stub is ready.

pgsql
Kopieren
Bearbeiten

Use ≤ 150 lines for the table.

────────────────────────────
▶️  BEGIN
────────────────────────────
1. Generate Jest template for Voucher sales feature.  
2. Run tests, update table.  
3. Continue until all 14 rows are filled.  
4. Return the final matrix.  

Do **not** stop after the first failure—mark it and keep going.  
Respond with the final markdown table and coverage summary only.
How it works

Replit AI will create test files, start the dev server inside the workspace, hit each tool and chat endpoint, then compile the markdown matrix.

You’ll get one concise table showing exactly which features still break and where (table, tool, unit, or chat layer).
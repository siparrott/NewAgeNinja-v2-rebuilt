You're absolutely right to be frustrated ‚Äî this featured image issue should have been resolved long ago. The system clearly works for embedded images, but the featured image field (image_url) is not being consistently set at creation, which is why posts appear without a visual preview even when images are in the body.

‚úÖ REPLIT FIX PROMPT ‚Äî FEATURED IMAGE & EMBEDDED IMAGES
Here‚Äôs the exact prompt you should give Replit to resolve both issues (missing featured image & inconsistent embedded images):

Prompt for Replit
markdown
Kopieren
Bearbeiten
üõ†Ô∏è TASK: FIX IMAGE HANDLING IN AUTO-BLOG SYSTEM

CONTEXT:
- Images are successfully uploaded to `/server/public/blog-images/`
- Images are embedded in the blog `content_html`, but sometimes fail due to:
  1. Escaped quotes breaking `<img>` tags
  2. Featured image (`image_url`) not being automatically set in `blog_posts` table
  3. Blog posts rendering with no preview because `image_url` is NULL
- All image uploads MUST create:
  ‚úÖ Clean <img> tags in `content_html` (no escaped quotes)
  ‚úÖ A `featured image` automatically assigned to the first image uploaded

---

### ‚úÖ **OBJECTIVE**
1. **IMAGE EMBEDDING**:
   - Ensure all `<img>` tags are inserted cleanly with proper HTML (no escaped quotes).
   - Confirm images display in the frontend by testing at least 2 consecutive new posts.

2. **FEATURED IMAGE**:
   - Automatically set the `image_url` field to the first uploaded image for every post created.
   - If multiple images exist, choose the first non-broken image.

3. **ROBUSTNESS**:
   - The fix must work for ANY content type (photography, sports, garden tools, golf, food).
   - If no images are uploaded, skip setting `image_url` gracefully.

---

### ‚úÖ **STEPS TO IMPLEMENT**
1. **Back-End Changes** (server/autoblog-assistant-first.ts):
   - After successful `content_html` creation:
     ```
     const firstImageMatch = contentHtml.match(/<img[^>]+src="([^">]+)"/);
     if (firstImageMatch) {
         await supabase.from('blog_posts')
             .update({ image_url: firstImageMatch[1] })
             .eq('id', postId);
     }
     ```
   - Sanitize all `<img>` tags by replacing escaped quotes:
     ```
     contentHtml = contentHtml.replace(/\\"/g, '"');
     ```

2. **Database Check**:
   - Run after each post creation:
     ```
     SELECT title, image_url, CASE WHEN content_html LIKE '%<img%' THEN 'HAS_IMAGES' ELSE 'NO_IMAGES' END
     FROM blog_posts ORDER BY created_at DESC LIMIT 3;
     ```
   - Verify `image_url` is populated for new posts.

3. **Frontend Update (BlogPostPage.tsx)**:
   - Ensure `featured image` displays as a `<meta og:image>` and as a preview card.

4. **QA TEST**:
   - Upload at least 2 sets of real images (golf balls, garden tools).
   - Confirm:
     ‚úÖ Blog content matches image context (golf content for golf balls, etc.).
     ‚úÖ Images are visible in post body AND a featured image preview is displayed.

---

### ‚úÖ **ACCEPTANCE CRITERIA**
- All new posts MUST have:
  ‚úÖ At least one `<img>` tag in `content_html`
  ‚úÖ A populated `image_url` field
  ‚úÖ Images visible both in the post body AND blog preview cards

When finished, show:
1. SQL output proving `image_url` is set
2. Screenshot of the blog preview with the featured image showing
3. Direct link to the new post with images displayed correctly
‚úÖ NEXT STEPS FOR YOU
Copy this entire prompt into Replit and run it as the next task.

Ask Replit to test by uploading TWO new posts with different images (e.g., golf balls + garden tools).

Request screenshots & database proof (image_url + <img> tags in content_html).
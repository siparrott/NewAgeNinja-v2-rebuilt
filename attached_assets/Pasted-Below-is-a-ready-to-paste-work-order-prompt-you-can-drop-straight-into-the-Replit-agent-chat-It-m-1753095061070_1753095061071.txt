Below is a ready-to-paste “work order” prompt you can drop straight into the Replit agent chat.
It makes the agent

Verify the context-string assembly (website scrape + past posts + SEO recommendations + reviews, etc.).

Unit-test & integration-test that the full context object is being transmitted to the OpenAI “autoblog” assistant on every blog-generation call.

Report clear pass / fail results and surface any missing data sources.

Prompt for Replit Agent
plaintext
Kopieren
Bearbeiten
🏗️  **TASK: Audit & Test AutoBlog Context Injection**

CONTEXT
• When a user creates a blog post we should build a single JSON `contextString` that combines:
  1. `siteSnapshot`         → most-recent crawl of the user’s public site (text + meta)
  2. `prevPostsOutline`     → titles, keyphrases & slugs of the last 10 published posts
  3. `seoIntel`             → top 20 keyword suggestions from /seo_analyzer
  4. `publicReviews`        → last 5 formatted review snippets
  5. `brandPalette`         → colours, logo URL, studio tone words  
• That string must be passed in **every** call to the OpenAI “autoblog-assistant”.
• File locations (current repo):
  - `server/autoblog/buildContext.ts`            – builds the string  
  - `server/routes/autoblog.ts`                  – REST endpoint → calls OpenAI
  - `agent/tools/autoblog_generate.ts`           – wraps the endpoint for the CRM agent

OBJECTIVES
1. **Static audit** – confirm each of the 5 data pieces is collected & appended.
2. **Runtime test** – hit `/api/autoblog/generate` with `studioId=test` and dump body sent to OpenAI.  
3. **Unit tests** – create `__tests__/autoblogContext.test.ts`
   - Mocks: stub site crawl, reviews, seo analyzer  
   - Expect final `contextString.length > 500` and includes “siteSnapshot”, “brandPalette”.
4. **Logging** – temporary `console.log("CTX:", contextString.slice(0,400))` in buildContext.
5. **Report** – markdown table: ✓/✗ for each data source, test pass/fail, improvements.

DELIVERABLES
• Updated code if anything is missing (one PR, keep diff small).  
• Test run output in agent reply.  
• Clear next-steps if deficiencies found.

Please START by running the static audit, then give me the initial findings.
What this does
Static audit tells the agent to read the build file and check that every data source is concatenated.

Runtime test guarantees the assistant payload really contains the context.

Unit tests keep it from regressing later.

The agent finishes with an at-a-glance table so you can spot gaps instantly.
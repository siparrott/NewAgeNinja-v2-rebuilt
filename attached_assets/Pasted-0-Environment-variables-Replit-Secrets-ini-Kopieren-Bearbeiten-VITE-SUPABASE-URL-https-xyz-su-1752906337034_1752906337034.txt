0. Environment variables ‚Üí Replit ‚ÄúSecrets‚Äù
ini
Kopieren
Bearbeiten
VITE_SUPABASE_URL=https://xyz.supabase.co
SUPABASE_SERVICE_ROLE_KEY=********
OPENAI_API_KEY=sk-************************
POSTMARK_TOKEN=pm-************************
STUDIO_DEFAULT_EMAIL_FROM="New Age Fotografie <hallo@newagefotografie.com>"
TZ=Europe/Vienna         # makes cron run in local time
1. Install / update packages (üìü Replit shell)
bash
Kopieren
Bearbeiten
npm i openai postmark stripe node-cron zod zod-to-json-schema uuid tsx
2. DB migration drizzle/migrations/2025_08_05_r5_agent.sql
sql
Kopieren
Bearbeiten
-- Working-memory & email queue
CREATE TABLE IF NOT EXISTS agent_chat_sessions (
 id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
 studio_id uuid,
 user_id   uuid,
 thread_id text,
 memory_json jsonb DEFAULT '{}'::jsonb,
 last_summary text,
 created_at timestamptz DEFAULT now(),
 updated_at timestamptz DEFAULT now()
);

CREATE TABLE IF NOT EXISTS email_outbox (
 id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
 studio_id uuid,
 to_email  text,
 subject   text,
 body_html text,
 status text DEFAULT 'queued',   -- queued|sent|failed
 retries int DEFAULT 0,
 created_at timestamptz DEFAULT now(),
 updated_at timestamptz DEFAULT now()
);
Apply once in shell:

bash
Kopieren
Bearbeiten
psql "$SUPABASE_DB_URL" -f drizzle/migrations/2025_08_05_r5_agent.sql
3. Memory helper agent/core/memory.ts
ts
Kopieren
Bearbeiten
import { createClient } from "@supabase/supabase-js";
export interface WorkingMemory { current_goal?:string|null; selected_client_id?:string|null; pending_proposals?:any[]; user_prefs?:{language?:string;currency?:string}; notes?:string[] }
const sb = createClient(process.env.VITE_SUPABASE_URL!, process.env.SUPABASE_SERVICE_ROLE_KEY!);

export async function loadSession(studio_id:string,user_id:string){
  const {data}=await sb.from("agent_chat_sessions").select("*").eq("studio_id",studio_id).eq("user_id",user_id).limit(1).maybeSingle();
  if(data) return data;
  const {data:row}=await sb.from("agent_chat_sessions").insert({studio_id,user_id,thread_id:"__PENDING__"}).select().single();
  return row;
}

export function injectMemory(msgs:any[],mem:WorkingMemory){msgs.push({role:"user",content:`[[WORKING_MEMORY]]\n${JSON.stringify(mem)}`});}

export async function patchMemory(session_id:string,patch:Partial<WorkingMemory>){
  await sb.from("agent_chat_sessions").update({memory_json:patch,updated_at:new Date().toISOString()}).eq("id",session_id);
}
4. Guardrail (simple) agent/core/guardrails.ts
ts
Kopieren
Bearbeiten
import type { AgentCtx } from "./ctx";
export function allowWrite(ctx:AgentCtx,authority:string,amount?:number){
  if(!ctx.policy.authorities.includes(authority)) return "deny";
  if(ctx.policy.mode==="read_only"||ctx.policy.mode==="propose") return "needs_approval";
  if(amount && amount > (ctx.policy.approval_required_over_amount ?? 0)) return "needs_approval";
  return "allow";
}
5. CRUD tool generator tools/genCrudTools.ts
ts
Kopieren
Bearbeiten
import { promises as fs } from "fs";
const tables=["crm_leads","crm_clients","crm_invoices","photography_sessions","galleries","blog_posts","email_campaigns"];
for(const t of tables){
  const P=t.replace(/(^|_)(\w)/g,(_,__,c)=>c.toUpperCase());
  await fs.writeFile(`agent/tools/${t}.ts`,`
import { z } from "zod"; import { createClient } from "@supabase/supabase-js";
import { allowWrite } from "../core/guardrails"; import type { AgentCtx } from "../core/ctx";
const sb=createClient(process.env.VITE_SUPABASE_URL!,process.env.SUPABASE_SERVICE_ROLE_KEY!);

export const read${P}={name:"read_${t}",description:"Read ${t}",parameters:z.object({limit:z.number().default(25)}),
handler:async(a:any,ctx:AgentCtx)=> (await sb.from("${t}").select("*").eq("studio_id",ctx.studioId).limit(a.limit)).data};

export const create${P}={name:"create_${t}",description:"Create row in ${t}",parameters:z.object({data:z.record(z.any())}),
handler:async(a:any,ctx:AgentCtx)=>{if(allowWrite(ctx,"CREATE_LEAD")!=="allow")throw new Error("Nope");
return (await sb.from("${t}").insert({...a.data,studio_id:ctx.studioId}).select().single()).data;}};
`);}
console.log("CRUD tools generated");
Generate once:

bash
Kopieren
Bearbeiten
npx ts-node tools/genCrudTools.ts
6. Email integration
agent/integrations/email.ts

ts
Kopieren
Bearbeiten
import postmark from "postmark"; const pm=new postmark.ServerClient(process.env.POSTMARK_TOKEN!);
export const sendEmail=async({to,subject,html}:{to:string;subject:string;html:string})=>{
 await pm.sendEmail({From:process.env.STUDIO_DEFAULT_EMAIL_FROM!,To:to,Subject:subject,HtmlBody:html});
};
agent/tools/send-email.ts

ts
Kopieren
Bearbeiten
import { z } from "zod"; import { sendEmail } from "../integrations/email";
export const sendEmailTool={name:"send_email",description:"Send email",parameters:z.object({to:z.string().email(),subject:z.string(),html:z.string()}),
handler:async(a:any)=>{await sendEmail(a);return{status:"sent"};}};
7. Cron jobs server/jobs/index.ts
ts
Kopieren
Bearbeiten
import cron from "node-cron"; import { sendEmail } from "../../agent/integrations/email";
import { createClient } from "@supabase/supabase-js";
const sb=createClient(process.env.VITE_SUPABASE_URL!,process.env.SUPABASE_SERVICE_ROLE_KEY!);

/* daily report 07:00 */
cron.schedule("0 7 * * *",async()=>{
  const { count:leads }=await sb.from("crm_leads").select("*",{count:"exact",head:true});
  await sendEmail({to:"owner@studio.com",subject:"Daily report",html:`<h3>New leads yesterday: ${leads??0}</h3>`});
},{timezone:process.env.TZ||"UTC"});

/* flush email queue every minute */
cron.schedule("*/1 * * * *",async()=>{
  const {data}=await sb.from("email_outbox").select("*").eq("status","queued").limit(20);
  for(const m of data||[]){try{await sendEmail({to:m.to_email,subject:m.subject,html:m.body_html});
     await sb.from("email_outbox").update({status:"sent"}).eq("id",m.id);}catch{await sb.from("email_outbox").update({status:"failed"}).eq("id",m.id);}}
});
Import once at top of server/index.ts:

ts
Kopieren
Bearbeiten
import "./jobs";
8. LLM run-loop agent/llm/run.ts
ts
Kopieren
Bearbeiten
import OpenAI from "openai"; const openai=new OpenAI({apiKey:process.env.OPENAI_API_KEY});
export async function runLLM(messages:any[],tools:any[]){
 return openai.chat.completions.create({model:"gpt-4o-mini",temperature:0.7,tools,messages});
}
9. System prompt agent/prompts/system.ts
text
Kopieren
Bearbeiten
You are {{STUDIO_NAME}}‚Äôs CRM Operations Assistant in TogNinja.

POLICY
- mode: {{POLICY_MODE}}
- authorities: {{POLICY_AUTHORITIES_CSV}}
- approval_limit: {{POLICY_AMOUNT_LIMIT}} {{STUDIO_CURRENCY}}

MEMORY
You receive [[WORKING_MEMORY]] JSON. Use silently.  
Call the update_memory tool when goals / selections change.

TOOLS
(list supplied automatically)

RULES
- Use the most specific tool.  
- For writes needing approval, respond with `proposed_actions` JSON.  
- Confirm success when tool returns status=created/updated.

Tone: founder-led, no-BS, Sabri Suby style.
Update assistant once:

bash
Kopieren
Bearbeiten
node agent/update-assistant.js newage      # ensures new prompt & tools
10. package.json
json
Kopieren
Bearbeiten
"scripts":{
  "start":"tsx server/index.ts",
  "gen:tools":"ts-node tools/genCrudTools.ts",
  "postinstall":"npm run gen:tools && node agent/update-assistant.js newage"
}
11. Run (Replit ‚ÄúRun‚Äù button or shell)
bash
Kopieren
Bearbeiten
npm run start
Console should show:

csharp
Kopieren
Bearbeiten
CRUD tools generated
Assistant updated ‚úî
[cron] daily report scheduled
[cron] email flush scheduled
Server listening on 0.0.0.0:3000
üîß Smoke tests
bash
Kopieren
Bearbeiten
# create a lead
node agent/scripts/test-lead-create.ts newage

# queue a dummy email
psql "$SUPABASE_DB_URL" -c "insert into email_outbox (studio_id,to_email,subject,body_html) values ('newage','test@example.com','Hi','<b>hello</b>');"
# wait 60 seconds ‚Üí status becomes 'sent'